use testApplication;
insert into orders(Order_Details, Quantity, Price, Order_Description, Order_Date) values("Note book", 12, 30.50, 'Hard bind silky cover with already provided common text for reference with King size 200 pages', '2024-09-09');
insert into orders(Order_Details, Quantity, Price, Order_Description, Order_Date) values("Lipstick", 12, 30.50, 'Extra large size, highly pigmented, Red 2050 shade', '2024-09-09');
insert into orders(Order_Details, Quantity, Price, Order_Description, Order_Date) values("Lipstick", 12, 30.50, 'Medium/Extra large size, highly pigmented, pink 2050 shade', '2024-09-09');


create fulltext index full_text_search on Orders(Order_Description);
create fulltext index full_text_search_in_details on Orders(Order_Details);
select * from Orders where match(order_Description) against('+size, -king' in boolean mode); 
select * from Orders where match(order_Description) against('Extra' with query expansion); 

select * from Orders where match(order_Description, order_Details) against('+book' in boolean mode); 

SHOW INDEX FROM Orders;
create fulltext index full_text_combied on Orders(order_Description, order_Details) ; 
SELECT * FROM Orders WHERE MATCH(Order_Description, Order_Details) AGAINST('cooker' IN BOOLEAN MODE);

select * from Orders;

ALTER TABLE Orders
DROP INDEX full_text;


-- in boolean mode with query expansion in natural language

select * from Orders where price = 30.50;

alter table orders add column order_descr text after order_date; 
select * from Orders;

SET SQL_SAFE_UPDATES = 0;

update Orders set order_descr = order_description;

SET SQL_SAFE_UPDATES = 1;

alter table Orders drop column order_description;

ALTER TABLE Orders
CHANGE COLUMN order_descr order_description text;


use testApplication;

create table Employee(
firstName Varchar(50), 
lastname text,
fullName varchar(100) generated always as (concat(firstName, ' ', lastName)) stored,
empId int not null auto_increment,
primary key(empId)
) auto_increment = 1000; 

INSERT INTO Employee(firstName, lastName, empId)
VALUES 
    ('Parul', 'Raut', 17),
    ('Sujal', 'Raut', 18),
    ('Suresh', 'Raut', 19),
    ('Madhumita', 'Raut', 20),
    ('Pranjal', 'Raut', 21);

select * from Employee;

create table Employees(
firstName Varchar(50), 
lastname text,
fullName varchar(100) generated always as (concat(firstName, ' ', lastName)) virtual,
empId int not null auto_increment,
primary key(empId)
) auto_increment = 1000; 

INSERT INTO Employees(firstName, lastName, empId)
VALUES 
    ('Parul', 'Raut', 17),
    ('Sujal', 'Raut', 18),
    ('Suresh', 'Raut', 19),
    ('Madhumita', 'Raut', 20),
    ('Pranjal', 'Raut', 21);

select * from Employees;


drop table employee;

DROP TABLE IF EXISTS Employee;

CREATE TABLE Employee (
    firstName VARCHAR(50),
    lastname TEXT,
    fullName VARCHAR(100) GENERATED ALWAYS AS (CONCAT(firstName, ' ', lastname)) STORED,
    empId INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    age INT,
    email VARCHAR(20),
    gender VARCHAR(1)
) AUTO_INCREMENT = 1000;

INSERT INTO Employee (firstName, lastname, age, email, gender)
VALUES 
    ('Amit', 'Sharma', 30, 'amit.sharma@example.com', 'M'),
    ('Nina', 'Gupta', 25, 'nina.gupta@example.com', 'F'),
    ('Ravi', 'Kumar', 28, 'ravi.kumar@example.com', 'M'),
    ('Sonia', 'Mehta', 32, 'sonia.mehta@example.com', 'F'),
    ('Raj', 'Singh', 27, 'raj.singh@example.com', 'M'),
    ('Anita', 'Desai', 29, 'anita.desai@example.com', 'F'),
    ('Vikram', 'Patel', 35, 'vikram.patel@example.com', 'M'),
    ('Priya', 'Jain', 26, 'priya.jain@example.com', 'F');

ALTER TABLE Employee
MODIFY COLUMN email VARCHAR(50);

DELIMITER **

Create trigger pre_emp_insert
before insert on Employee 
for each row 
begin 
	if new.gender = 'M' then
		set new.firstName = concat('Mr ', new.firstName);
    else
		set new.firstName = concat('Ms ', new.firstName);
    end if;    
end **

DELIMITER ; 


select * from employee;

INSERT INTO Employee (firstName, lastname, age, email, gender)
VALUES 
    ('Deepak', 'Rao', 33, 'deepak.rao@example.com', 'M'),
    ('Meera', 'Nair', 27, 'meera.nair@example.com', 'F'),
    ('Karan', 'Gupta', 31, 'karan.gupta@example.com', 'M'),
    ('Leena', 'Arora', 28, 'leena.arora@example.com', 'F'),
    ('Mohan', 'Yadav', 29, 'mohan.yadav@example.com', 'M'),
    ('Rita', 'Bansal', 30, 'rita.bansal@example.com', 'F'),
    ('Amitabh', 'Singh', 34, 'amitabh.singh@example.com', 'M'),
    ('Pooja', 'Sinha', 26, 'pooja.sinha@example.com', 'F');



delimiter $$
create procedure handle_sql_exception2()
begin
	declare continue handler for sqlexception
    begin
		select 'exception generat';
    end;
    
	INSERT INTO Employee (firstName, lastname, age, email, gender) VALUES ('Amit', null, 30, 'amit.sharma@example.com', 'M');
	INSERT INTO Employee (firstName, lastname, age, email, gender) VALUES ('Amit', 'khurana', 30, 'amit.sharma@example.com', 'M');

end$$

DELIMITER ; 

call handle_sql_exception2();

INSERT INTO Employee (firstName, lastname, age, email, gender) VALUES ('Amit', 'khurana', 30, 'amit.sharma@example.com', 'M');

alter table Employee modify column lastName text not null;

SET SQL_SAFE_UPDATES = 0;

delete from Employee where lastname is null;
SET SQL_SAFE_UPDATES = 1;


delimiter $$
create procedure handle_sql_exception6()
begin
	declare continue handler for sqlstate  '45000'
    begin
		select 'exception generat';
    end;
    
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Custom exception generated';
	select * from Employee where firstName = 'Amit';
end$$

DELIMITER ; 

call handle_sql_exception6();
